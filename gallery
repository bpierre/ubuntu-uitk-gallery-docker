#!/bin/bash

DEBUG_MODE=false
LOG_FILE=uitk-gallery.log
DEFAULT_UITK_BRANCH=lp:ubuntu-ui-toolkit/staging
DOCKER_IMAGE=bpierre/ubuntu-uitk-gallery
GRID_UNIT_PX=8
PLATFORM=$(python -c "import sys;print(sys.platform)")
DISTRIBUTION=$(python -c "import platform;print(platform.linux_distribution()[0])")

run() {
  if $DEBUG_MODE; then
    "$@"
  else
    "$@" &>"$LOG_FILE"
  fi
}

# http://djm.me/ask
ask() {
  while true; do

    if [ "${2:-}" = "Y" ]; then
      prompt="Y/n"
      default=Y
    elif [ "${2:-}" = "N" ]; then
      prompt="y/N"
      default=N
    else
      prompt="y/n"
      default=
    fi

    # Ask the question - use /dev/tty in case stdin is redirected from
    # somewhere else
    read -p "$1 [$prompt] " REPLY </dev/tty

    # Default?
    if [ -z "$REPLY" ]; then
      REPLY=$default
    fi

    # Check if the reply is valid
    case "$REPLY" in
      Y*|y*) return 0 ;;
      N*|n*) return 1 ;;
    esac

  done
}

# Colors: check if stdout is a terminal and supports colors
if test -t 1; then
  ncolors=$(tput colors)
  if [ -n "$ncolors" ] && [ $ncolors -ge 8 ]; then
    normal="$(tput sgr0)"
    red="$(tput setaf 1)"
    green="$(tput setaf 2)"
    yellow="$(tput setaf 3)"
    blue="$(tput setaf 4)"
    magenta="$(tput setaf 5)"
    cyan="$(tput setaf 6)"
    white="$(tput setaf 7)"
  fi
fi

pretty_echo() {
  infostr=""
  if [ $# -ge 2 ] && [ "$2" != "" ]; then
    infostr="$2 "
  fi
  if [ $# -ge 3 ] && [ "$3" != "" ]; then
    infostr="${infostr}${yellow}${3}${normal} "
  fi
  if [ "$infostr" != "" ]; then
    echo -n "$1 $infostr"
  fi
}

echo_check() {
  pretty_echo " ${green}✓${normal}" "$@"
  echo ""
}

echo_err() {
  pretty_echo " ${red}✗${normal}" "$@"
  echo ""
}

echo_wait() {
  tput sc
  echo_wait_par1=$1
  echo_wait_par2=$2
  pretty_echo " ${blue}…${normal}" "$@"
}

echo_wait_stop_ok() {
  tput rc
  tput ed
  echo_check "$echo_wait_par1" "$echo_wait_par2"
}

echo_wait_stop_nok() {
  tput rc
  tput ed
  echo_err "$echo_wait_par1" "$echo_wait_par2"
}

show_help() {
cat << EOF
Usage: ./${0##*/} [-hc] [-i DOCKER_IMAGE] [-g GU_PX] [UI_TOOLKIT_BRANCH]

    -h              Display this help and exit.
    -i DOCKER_IMAGE Change the Docker image used to create the containers.
    -g GU_PX        Change the number of pixels per grid unit (to scale
                    things).
    -c              Remove the containers and images created by the script.
EOF
}

clean_all() {
  echo ""
  if ask "This action will remove the created images and containers. Are you sure?" N; then
    echo 'Clean containers...'
    docker rm $(docker ps -a | awk '/uitk_/ {print $1}')

    echo 'Clean images...'
    docker rmi  $DOCKER_IMAGE

  else
    echo "Exiting."
  fi
  exit 0
}

# Docker auto installation
docker_or_exit() {
  if command -v docker >/dev/null 2>&1; then
    return 0
  fi
  if ask "Docker not installed. Do you want to install it now?"; then
      wget -qO- https://get.docker.com/ | sh

      if [ "$PLATFORM" = "darwin" ]; then
        # TODO: OS X support
        echo "Docker is probably installed."

      elif [ "$PLATFORM" = "linux2" ]; then
        sudo usermod -aG docker `whoami`
        echo "Please logout and login again, then launch the script again."
      fi

      exit 0
  fi
  echo "Exiting."
  exit 0
}

# The platform can only be "darwin" or "linux2".
platform_or_exit() {
  if [ "$PLATFORM" != "darwin" ] && [ "$PLATFORM" != "linux2" ]; then
    echo "Unsupported platform: ${PLATFORM}." 1>&2
    exit 1
  fi
  return 0
}

check_requirements() {
  platform_or_exit && echo_check "Platform supported -" "$PLATFORM"
  docker_or_exit && echo_check "Docker installed -" "$(docker --version | awk '{$1="";$0=$0;$1=$1;print $0}')"
}

x11_redirect_on() {
  if [ "$PLATFORM" = "linux2" ]; then
    xhost +local:$CID >/dev/null 2>&1 || { echo "X11 redirection error"; exit 1; }
  elif [ "$PLATFORM" = "darwin" ]; then
    socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\" &
    SOCAT_PID=$!
  fi
  return 0
}

x11_redirect_off() {
  if [ "$PLATFORM" = "linux2" ]; then
    xhost -local:$CID >/dev/null 2>&1 || { echo "X11 redirection error"; exit 1; }
  elif [ "$PLATFORM" = "darwin" ] && [ -n "$SOCAT_PID" ]; then
    kill $SOCAT_PID
  fi
  return 0
}

echo

# Options
OPTIND=1
while getopts "hcdi:g:" opt; do
  case "$opt" in
    h)
      show_help
      exit 0
      ;;
    c)
      check_requirements
      clean_all
      ;;
    i)
      DOCKER_IMAGE=$OPTARG
      ;;
    g)
      GRID_UNIT_PX=$OPTARG
      ;;
    d)
      DEBUG_MODE=true
      ;;
    \?)
      show_help >&2
      exit 1
      ;;
    esac
done
shift "$((OPTIND-1))"

# Set the default branch if the user didn’t set anything
UITK_BRANCH="$@"
if [ -z "$UITK_BRANCH" ]; then
  UITK_BRANCH="$DEFAULT_UITK_BRANCH"
fi

# Options parsed, check the requirements first
check_requirements

echo_check "Docker Image set -" "$DOCKER_IMAGE"
echo

# Create a UID for the container, based on the parameters
CID="uitk_$( \
  echo ${DOCKER_IMAGE}${GRID_UNIT_PX}${UITK_BRANCH}$CID | \
  shasum -a 1 | \
  awk '{print $1}' \
)"

echo_check "Branch -" "$DEFAULT_UITK_BRANCH"
echo_check "Pixels per GU -" "$GRID_UNIT_PX"
echo

# Fix a DNS issue on Ubuntu / OS X systems when external DNS are blocked
DNS_EXTRA=""
if [ "$PLATFORM" = "linux2" ]; then
  if [ "$DISTRIBUTION" = "Ubuntu" ]; then
    if command -v nm-tool >/dev/null 2>&1; then
      dns_server=$(nm-tool | awk '/DNS/ {$1=$1;print $2}' | head -n1)
    elif command -v nmcli >/dev/null 2>&1; then
      dns_server=$(nmcli dev show | awk '/IP4\.DNS/ {print $2}' | head -n1)
    fi
  fi
elif [ "$PLATFORM" = "darwin" ]; then
  dns_server=$(cat /etc/resolv.conf | awk '/^nameserver/ { print $2 }' | head -n1)
fi

if [ "$dns_server" != "" ]; then
  DNS_EXTRA="--dns=$dns_server"
  echo_check "Additional DNS server set -" $dns_server
fi

DOCKER_DISPLAY="unix$DISPLAY"
if [ "$PLATFORM" = "darwin" ]; then
  HOST_IP=$(ifconfig $(route -n get $(docker-machine ip default) | awk '/interface/ { print $2 }') | awk '/inet/ { print $2 }')
  DOCKER_DISPLAY="$HOST_IP:0"
fi

x11_redirect_on
echo_check "X11 redirect -" "done"

CONTAINER_EXISTS=$(docker ps -a | grep "$CID")

if [ -n "$CONTAINER_EXISTS" ]; then

  # Re attach an existing container
  echo_check "The container already exist -" "attaching"
  echo

  run docker start --attach "$CID"
else

  # Instanciate a new container
  echo_check "The container does not exist -" "creating"
  echo

  run docker run -it \
    --volume /tmp/.X11-unix:/tmp/.X11-unix:rw \
    --privileged \
    --env DISPLAY=$DOCKER_DISPLAY \
    --env UITK_BRANCH="$UITK_BRANCH" \
    --env GRID_UNIT_PX="$GRID_UNIT_PX" \
    --name="$CID" \
    --hostname="$CID" \
    $DNS_EXTRA --dns="8.8.8.8" \
    $DOCKER_IMAGE
fi

x11_redirect_off
